#!/usr/bin/env python

import os
import re
import sys
import argparse
from datetime import datetime

parser = argparse.ArgumentParser()
parser.add_argument("--name", help="the name of your new project",
                    required=True)
parser.add_argument("--description", help="the description of your new project",
                    required=True)
parser.add_argument("--major-version", help=("the current major version of "
                                             "projects, e.g. 4.9"),
                    required=True)
parser.add_argument("--next-version", help=("the next major version projects, "
                                            "e.g. 5.0"),
                    required=True)

args = parser.parse_args()

# validate that jimmy used a valid name
if not re.search(r'^[a-z_][a-z0-9_]{0,30}$', args.name):
    sys.stderr.write("ERROR: name '{}' is not valid. name must match "
                     "'^[a-z_][a-z0-9_]{{0,30}}$'\n".format(args.name))
    sys.exit(100)

# we'll use this several times below
year = datetime.now().year

# all our paths
base_path = args.name
setup_py_path = os.path.join(base_path, "setup.py")
setup_cfg_path = os.path.join(base_path, "setup.cfg")
coveragerc_path = os.path.join(base_path, ".coveragerc")
stdeb_path = os.path.join(base_path, "stdeb.cfg")
readme_path = os.path.join(base_path, "README")
manifestin_path = os.path.join(base_path, "MANIFEST.in")
hgignore_path = os.path.join(base_path, ".hgignore")

examples_path = os.path.join(base_path, "examples")
config_path = os.path.join(examples_path, args.name + ".ini")

debian_path = os.path.join(base_path, "debian")
overrides_path = os.path.join(debian_path, "pydist-overrides")
install_path = os.path.join(debian_path, "python-{}.install".format(args.name))

tools_path = os.path.join(base_path, "tools")

project_path = os.path.join(base_path, args.name)
init_path = os.path.join(project_path, "__init__.py")

tests_path = os.path.join(project_path, "tests")
tests_init_path = os.path.join(tests_path, "__init__.py")
tests_base_path = os.path.join(tests_path, "base.py")

# validate that jimmy isn't trying to hose a valid project
if os.path.exists(base_path):
    sys.stderr.write("ERROR: project '{}' already exists!\n".format(args.name))
    sys.exit(100)

# content of everything
setup_py_content = """\
# Copyright {year}, Truveris Inc. All Rights Reserved.

from __future__ import absolute_import

from setuptools import setup, find_packages

from {name} import __pkg_version__


truveris_dependencies = ["{{}}=={{}}".format(p, __pkg_version__) for p in (
    "pytruveris",
)]


third_party_dependencies = [
]


tests_require = (
    "nose",
)

setup(
    name="{name}",
    version=__pkg_version__,
    description="{description}",
    author="Truveris Inc.",
    author_email="dev@truveris.com",
    url="http://www.truveris.com/",
    scripts=[
    ],
    install_requires=truveris_dependencies + third_party_dependencies,
    tests_require=tests_require,
    test_suite="nose.collector",
    packages=find_packages(exclude=["ez_setup"]),
)
""".format(year=year, name=args.name, description=args.description)

setup_cfg_content = """\
[flake8]
ignore=E128

[nosetests]
with-coverage=1
cover-package={name}
cover-erase=1
cover-inclusive=1
match=^test
""".format(name=args.name)

coveragerc_content = """\
[run]
omit = *tests*
"""

stdeb_content = """\
[DEFAULT]
XS-Python-Version: >= 2.7
Depends: python-pytruveris (>= {}), python-pytruveris (<< {})
""".format(args.major_version, args.next_version)

readme_content = """\
{description}
{underline}

Requirements:
-------------
 - Python 2.7+

Running:
--------

    $ ./tools/{name} config.ini

Unit test:
----------

    $ nosetests

Required Python Modules:
------------------------
 - pytruveris

Deployment on Linux
-------------------
 - mkdir /var/log/{name}
 - chown {name}:truveris /var/log/{name}

New release updates
-------------------
To be done at each new release branch:

 - run tru-update-versions

""".format(description=args.description, underline=(len(args.description)*"="),
           name=args.name)

manifestin_content = """\
include debian
"""

hgignore_content = """\
^.*~$
^.*[.]orig$
^.ropeproject
.*\.log$
.*\.pyc$
.*\.pyo$
{name}.egg-info
{name}/revision.py
venv.*
.*\.core$
.coverage
dist/
build
virtualenv
venv-.*
.un~$
.swp$
run.sh
^config.*.ini$
\\.coverage
""".format(name=args.name)

config_content = """\
# Copyright {year}, Truveris Inc. All Rights Reserved.
#
# This is the default {capitalized} configuration file.
#

[general]
# path to where lock files are placed
lock_path = /var/truveris/{name}

[debug]
# debug options here

[db]
url = postgresql+psycopg2://{name}:truveris@127.0.0.1/truveris
echo = false

[mail]
# Get the word out
notification_sender = {name}@truveris.com
notification_recipient = dev@truveris.com

#
# Logging configuration
#
[loggers]
keys = root, {name}, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_{name}]
level = DEBUG
handlers =
qualname = {name}

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
""".format(year=year, capitalized=args.name.capitalize(), name=args.name)

overrides_content = """\
celery python-celery
kombu-sqlalchemy python-kombu-sqlalchemy
mako python-mako
netaddr python-netaddr
openpyxl python-openpyxl
pastescript python-pastescript
psycopg2 python-psycopg2
pylibmc python-pylibmc
pylons python-pylons
python-gnupg python-gnupg
pytruveris python-pytruveris
sqlalchemy python-sqlalchemy
webob python-webob
beautifulsoup4 python-bs4
"""

install_content = """\
examples/{name}.ini /etc/{name}/
""".format(name=args.name)

init_content = '''\
# Copyright {year}, Truveris Inc. All Rights Reserved.

"""
This is mostly used to maintain a version number. This version number will
include the revision from the mercurial/git repository when packaged.
"""

__copyright__ = "(c) {year} Truveris"
__version__ = "{major_version}"
__pkg_version__ = __version__
__last_modified__ = None


try:
    from revision import __revision__, __revision_date__
    __version__ = __version__ + "." + __revision__
    __last_modified__ = __revision_date__
except ImportError:
    pass
'''.format(year=year, major_version=args.major_version)

tests_init_content = ""

tests_base_content = '''\
# Copyright {year}, Truveris Inc. All Rights Reserved.

from truveris.model import meta
from truveris.tests import TestCase as BaseTestCase


class TestCase(BaseTestCase):

    """
    Base test case setting up the model/data for each test case.
    """

    def setUp(self):
        super(TestCase, self).setUp()

        meta.session.execute("delete from clients")
        meta.session.execute("delete from users")

        meta.session.commit()

        self._create_user()
        self._create_client()

        meta.session.commit()

    def tearDown(self):
        meta.session.expunge_all()
        meta.session.commit()
'''.format(year=year)

# helper function to write files
def write_file(path, content):
    with open(path, "w") as fp:
        fp.write(content)

# begin creating ze files
os.makedirs(base_path)

write_file(setup_py_path, setup_py_content)
write_file(setup_cfg_path, setup_cfg_content)
write_file(coveragerc_path, coveragerc_content)
write_file(stdeb_path, stdeb_content)
write_file(readme_path, readme_content)
write_file(manifestin_path, manifestin_content)
write_file(hgignore_path, hgignore_content)

os.makedirs(examples_path)
write_file(config_path, config_content)

os.makedirs(debian_path)
write_file(overrides_path, overrides_content)
write_file(install_path, install_content)

os.makedirs(tools_path)

os.makedirs(project_path)
write_file(init_path, init_content)

os.makedirs(tests_path)
write_file(tests_init_path, tests_init_content)
write_file(tests_base_path, tests_base_content)
