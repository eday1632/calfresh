# -*- coding: utf-8 -*-

"""
requests.hooks
~~~~~~~~~~~~~~

This module provides the capabilities for the Requests hooks system.

Available hooks:

``response``:
    The response generated from a Request.
<<<<<<< HEAD
"""
=======

"""


>>>>>>> ed5a9085bf86f543e4a5903d58afd2302760d16e
HOOKS = ['response']


def default_hooks():
<<<<<<< HEAD
    return dict((event, []) for event in HOOKS)
=======
    hooks = {}
    for event in HOOKS:
        hooks[event] = []
    return hooks
>>>>>>> ed5a9085bf86f543e4a5903d58afd2302760d16e

# TODO: response is the only one


def dispatch_hook(key, hooks, hook_data, **kwargs):
    """Dispatches a hook dictionary on a given piece of data."""
<<<<<<< HEAD
    hooks = hooks or dict()
    hooks = hooks.get(key)
    if hooks:
        if hasattr(hooks, '__call__'):
            hooks = [hooks]
=======

    hooks = hooks or dict()

    if key in hooks:
        hooks = hooks.get(key)

        if hasattr(hooks, '__call__'):
            hooks = [hooks]

>>>>>>> ed5a9085bf86f543e4a5903d58afd2302760d16e
        for hook in hooks:
            _hook_data = hook(hook_data, **kwargs)
            if _hook_data is not None:
                hook_data = _hook_data
<<<<<<< HEAD
=======

>>>>>>> ed5a9085bf86f543e4a5903d58afd2302760d16e
    return hook_data
